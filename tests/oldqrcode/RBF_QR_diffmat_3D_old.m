function [A,Psi,T] = RBF_QR_diffmat_3D_old(op,xe,varargin)
% Alternative calls:
% [A,Psi]=RBF_QR_diffmat(op,xe,xk,ep) % First time
% [A,Psi]=RBF_QR_diffmat(op,xe,Psi)   % If Psi is already computed
%
% Computes a differentiation matrix (weights for RBF-FD stencils)
% using Gaussian RBFs at evaluation point(s) xe for RBFs placed at
% the nodes xk.
%
%--- op (char)    : '0', 'x', 'y', 'z', 'L'
%                   If a cell array is given, differentiation matrices are
%                   returned in the same order in the cell array A.
%--- xe(1:M,1:3)  : The evaluation point(s) in Cartesian coordinates
%--- xk(1:N,1:3)  : The node points (no particular scaling assumed)
%--- ep (scalar)  : The (constant) shape parameter
%--- Psi (struct) : Generated by a call to this function. Defines
%                   the RBF-QR basisfunctions Psi.
%
if length(varargin) == 1
    Psi = varargin{1};
    xe = [xe(:,1)-Psi.cc(1) xe(:,2)-Psi.cc(2) xe(:,3)-Psi.cc(3)];
    [la,th,r] = cart2sph(xe(:,1),xe(:,2),xe(:,3));
    xe = [r/Psi.rr pi/2-th la];
elseif length(varargin) >= 2
    xk = varargin{1};
    ep = varargin{2};
    
    % Rescale nodes to fit inside unit ball
    cc = sum(xk,1)/size(xk,1); % Center of ball
    xk = [xk(:,1)-cc(1) xk(:,2)-cc(2) xk(:,3)-cc(3)];
    xe = [xe(:,1)-cc(1) xe(:,2)-cc(2) xe(:,3)-cc(3)];
    [la,th,r] = cart2sph(xk(:,1),xk(:,2),xk(:,3));
    [lae,the,re] = cart2sph(xe(:,1),xe(:,2),xe(:,3));
    rr = max(max(r),max(re));
    
    xk = [r/rr pi/2-th la];
    xe = [re/rr pi/2-the lae];
    ep = ep*rr;
    
    Psi = InitPsi_3D(ep,xk);
    Psi.rr = rr;
    Psi.cc = cc;
    %
    % Also compute the interpolation matrix which is reused for all ops
    %
    Psi.A0 = RBF_QR_mat_3D_old(Psi,'0',Psi.xk);

    %--- Factorize it and store the factors
    [Psi.L,Psi.U,Psi.piv] = lu(Psi.A0,'vector');
end

%--- Compute the differentiation matrix
if ~iscellstr(op)
    % A single operator
    [A,T] = RBF_QR_mat_3D_old(Psi,op,xe);
    %A = A/Psi.A0;
    A = (A/Psi.U)/Psi.L;
    A(:,Psi.piv) = A;
    A = rescale_op(A,Psi.rr,op);    
else
    numop = length(op);
    A = cell(1,numop);
    for i = 1:numop
        if i == 1, var = xe;
        else var = T;
        end
        [A{i},T] = RBF_QR_mat_3D_old(Psi,op{i},var);
        %A{i} = A{i}/Psi.A0;
        A{i} = (A{i}/Psi.U)/Psi.L;
        A{i}(:,Psi.piv) = A{i};
        A{i} = rescale_op(A{i},Psi.rr,op{i});
    end
end

function A = rescale_op(A,rr,op)
% Operator rescaling to account for scaling of nodes to unit ball
switch(op)
    case {'x','y','z'}
        A = (1/rr)*A;
    case {'L','xx','yy','zz','xy','yx','zx','xz','yz','zy'}
        A = (1/rr^2)*A;
    case {'L1','L2','L3','L4'}
        d = str2num(op(2));
        A = (1/rr^(2*d))*A;
end
